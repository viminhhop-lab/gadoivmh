import streamlit as st
import yt_dlp
import os
import subprocess
import tkinter as tk
from tkinter import filedialog

# --- H√†m ch·ªçn th∆∞ m·ª•c ---
def pick_directory():
    root = tk.Tk()
    root.withdraw()
    folder = filedialog.askdirectory()
    root.destroy()
    return folder

# --- H√†m t·∫£i v√† c·∫Øt theo s·ªë ph√∫t ƒë√£ ch·ªçn ---
def download_segment(url, save_dir, minutes, mode="video", resolution=None, filename="output", crf=23, preset="veryfast"):
    os.makedirs(save_dir, exist_ok=True)
    temp_file = os.path.join(save_dir, f"{filename}_temp.%(ext)s")
    final_file = os.path.join(save_dir, f"{filename}.mp4" if mode != "audio" else f"{filename}.mp3")

    if mode == "audio":
        fmt = "bestaudio/best"
    elif mode == "mute":
        fmt = f"bestvideo[height<={resolution}]" if resolution else "bestvideo"
    else:  # video c√≥ ti·∫øng
        fmt = f"bestvideo[height<={resolution}]+bestaudio/best" if resolution else "bestvideo+bestaudio/best"

    ydl_opts = {
        "format": fmt,
        "outtmpl": temp_file,
        "merge_output_format": "mp4" if mode != "audio" else "mp3"
    }

    # t·∫£i video g·ªëc
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    # t√¨m file v·ª´a t·∫£i
    downloaded_file = None
    for f in os.listdir(save_dir):
        if f.startswith(f"{filename}_temp"):
            downloaded_file = os.path.join(save_dir, f)
            break

    if not downloaded_file:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y file sau khi t·∫£i!")
        return

    # s·ªë gi√¢y c·∫ßn c·∫Øt
    duration_sec = minutes * 60

    # c·∫Øt video/audio
    if mode == "audio":
        cmd = ["ffmpeg", "-y", "-i", downloaded_file, "-t", str(duration_sec), "-vn", "-acodec", "mp3", final_file]
    elif mode == "mute":
        cmd = ["ffmpeg", "-y", "-i", downloaded_file, "-t", str(duration_sec), "-an", "-c:v", "libx264", "-preset", preset, "-crf", str(crf), final_file]
    else:  # video c√≥ ti·∫øng
        cmd = ["ffmpeg", "-y", "-i", downloaded_file, "-t", str(duration_sec), "-c:v", "libx264", "-preset", preset, "-crf", str(crf), "-c:a", "aac", "-b:a", "128k", final_file]

    subprocess.run(cmd, check=True)

    # xo√° file g·ªëc
    os.remove(downloaded_file)
    st.success(f"‚úÖ ƒê√£ l∆∞u {final_file}")

# --- Giao di·ªán Streamlit ---
st.title("üé¨ YouTube Downloader (t·∫£i theo s·ªë ph√∫t ƒë·∫ßu)")

if "save_dir" not in st.session_state:
    st.session_state["save_dir"] = os.getcwd()
if "duration" not in st.session_state:
    st.session_state["duration"] = 9   # m·∫∑c ƒë·ªãnh 9 ph√∫t

if st.button("üìÇ Ch·ªçn th∆∞ m·ª•c l∆∞u file"):
    folder = pick_directory()
    if folder:
        st.session_state["save_dir"] = folder

st.write(f"üìÅ Th∆∞ m·ª•c l∆∞u hi·ªán t·∫°i: `{st.session_state['save_dir']}`")

# nh·∫≠p link
links_text = st.text_area("üìå D√°n link YouTube (m·ªói d√≤ng m·ªôt link):")

# tƒÉng/gi·∫£m s·ªë ph√∫t
col1, col2, col3 = st.columns([1,2,1])
with col1:
    if st.button("‚ûñ"):
        if st.session_state.duration > 1:
            st.session_state.duration -= 1
with col2:
    st.markdown(f"<h4 style='text-align:center'>Th·ªùi l∆∞·ª£ng t·∫£i: {st.session_state.duration} ph√∫t</h4>", unsafe_allow_html=True)
with col3:
    if st.button("‚ûï"):
        st.session_state.duration += 1

# tu·ª≥ ch·ªânh encode
st.markdown("### ‚öôÔ∏è Tu·ª≥ ch·ªânh encode H.264")
crf = st.slider("CRF (0-51, th·∫•p = ƒë·∫πp h∆°n nh∆∞ng n·∫∑ng)", min_value=18, max_value=30, value=23)
preset = st.selectbox("Preset", 
    ["ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow"], 
    index=2)

# l·∫•y danh s√°ch video
if st.button("üîé L·∫•y danh s√°ch video"):
    links = [l.strip() for l in links_text.splitlines() if l.strip()]
    st.session_state["videos"] = [{"idx": i+1, "url": link} for i, link in enumerate(links)]

# hi·ªÉn th·ªã danh s√°ch video
if "videos" in st.session_state:
    for vid in st.session_state["videos"]:
        st.subheader(f"Video {vid['idx']}: {vid['url']}")

        resolution = st.selectbox(
            f"ƒê·ªô ph√¢n gi·∫£i cho Video {vid['idx']}:",
            ["360", "480", "720", "1080"],
            key=f"res_{vid['idx']}"
        )

        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button(f"‚¨áÔ∏è MP3 ({st.session_state.duration} ph√∫t)", key=f"mp3_{vid['idx']}"):
                download_segment(vid["url"], st.session_state["save_dir"],
                                 st.session_state.duration,
                                 mode="audio", filename=f"Video{vid['idx']}",
                                 crf=crf, preset=preset)
        with col2:
            if st.button(f"üé• C√≥ ti·∫øng ({st.session_state.duration} ph√∫t)", key=f"video_{vid['idx']}"):
                download_segment(vid["url"], st.session_state["save_dir"],
                                 st.session_state.duration,
                                 mode="video", resolution=resolution,
                                 filename=f"Video{vid['idx']}",
                                 crf=crf, preset=preset)
        with col3:
            if st.button(f"üîá Kh√¥ng ti·∫øng ({st.session_state.duration} ph√∫t)", key=f"mute_{vid['idx']}"):
                download_segment(vid["url"], st.session_state["save_dir"],
                                 st.session_state.duration,
                                 mode="mute", resolution=resolution,
                                 filename=f"Video{vid['idx']}",
                                 crf=crf, preset=preset)

    # üî• Th√™m n√∫t t·∫£i t·∫•t c·∫£ (m·∫∑c ƒë·ªãnh 720p, kh√¥ng ti·∫øng)
    if st.button(f"üì• T·∫£i t·∫•t c·∫£ ({st.session_state.duration} ph√∫t, kh√¥ng ti·∫øng, 720p)"):
        for vid in st.session_state["videos"]:
            with st.spinner(f"ƒêang t·∫£i Video {vid['idx']} ..."):
                download_segment(
                    vid["url"],
                    st.session_state["save_dir"],
                    st.session_state.duration,
                    mode="mute",
                    resolution="720",   # m·∫∑c ƒë·ªãnh 720p
                    filename=f"Video{vid['idx']}",
                    crf=crf,
                    preset=preset
                )
        st.success("‚úÖ ƒê√£ t·∫£i xong t·∫•t c·∫£ video ·ªü ch·∫ø ƒë·ªô kh√¥ng ti·∫øng (720p)!")
